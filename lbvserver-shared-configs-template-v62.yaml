name: lbvserver-shared-configs-template
namespace: neustar.citrix.adc.stylebooks
version: "6.2"
private: true
description: |    
    This StyleBook contains the configuration for one virtual service of an app.
schema-version: "1.0"
import-stylebooks: 
  - 
    namespace: netscaler.nitro.config
    prefix: ns
    version: "13.0"
  - 
    namespace: com.citrix.adc.stylebooks
    prefix: stlb
    version: "1.0"
  - 
    namespace: com.citrix.adc.stylebooks
    prefix: stlb12
    version: "1.2"
  -
    namespace: neustar.citrix.adc.stylebooks
    prefix: neustar
    version: "6.2"
parameters:
  - 
    name: customer-name
    label: Customer
    description: Customer Name or ID that is used to differentiate a customer's config objects
    type: string
    pattern: "^[A-Z0-9]{2}_[A-Z0-9]{2,10}$"
    required: true
  - 
    name: appname
    label: "Application Name"
    description: "Name of the Load Balanced application"
    type: string
    gui:
      updatable: false
    required: true
  - 
    name: vserver-name
    label: "VServer Name"
    description: "Name of the VServer"
    type: string
    gui:
      updatable: false
    required: true
  - 
    name: anull
    type: string

parameters-default-sources:
  - neustar::lbvserver-template-params
  - neustar::shared-configs-for-apps-params
substitutions:
  ratelimit-expr(limit-id): str("sys.check_limit") + str("(%{quotewrap($limit-id)}%)")
  add-ratelimit-expr(expr, limit-id): if-then-else($expr == "true", $substitutions.ratelimit-expr($limit-id), $substitutions.ratelimit-expr($limit-id) + str(" && %{$expr}%"))
  responder-pol-name(responder-config-name, act, rl): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-" + $act + if-then-else($rl, "-ratelimit-pol" , "-rpol")
  responder-act-name(responder-config-name, act): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-" + $act + "-ract"
  responder-ss-name(responder-config-name): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-ss"
  responder-li-name(responder-config-name): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-li"
  responder-log-name(responder-config-name): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-log"
  #ratelimit-pol-name(responder-config-name, act): $parameters.customer-name + "-" + $parameters.appname + "-" + $parameters.name + "-" + $responder-config-name + "-" + $act + "-ratelimit-pol"
  responder-action-type(action-type): if-then-else($action-type == "redirect_to", "redirect", "respondWith")
  transform-action-name(action-name): if-then-else($action-name == "log" or $action-name == "no_action", "NOOP", if-then-else($action-name == "block", "DROP", $action-name))
  is-actionable(act): if-then-else($act == "redirect_to" or $act == "respond_with", true, false)
  responder-action(action-type, action-name): if-then-else($action-type == "block", "DROP", if-then-else($action-type == "log" or $action-type == "no_action", "NOOP", $action-name))
  #generate-rule(expr): if-then-else($parameters.rate-limiter, if-then-else($expr, $expr + "\t && sys.CHECK_LIMIT(\"" + $parameters.customer-name + "_" + $parameters.name + "_ss_li" + "\")", $expr)
  #generate-rule(expr): if-then-else($parameters.rate-limiter, if-then-else($expr, $expr + " && " + $substitutions.syslimit-str, $substitutions.syslimit-str), $expr)
  generate-rule(limit-id, expr): if-then-else($limit-id, if-then-else($expr, $expr + " && " + $substitutions.ratelimit-expr($limit-id), $substitutions.ratelimit-expr($limit-id)), $expr)
  limitidentifier(name): replace($substitutions.responder-li-name($name), "-", "_")
components:
  -
    name: responder-ss-comp
    type: ns::streamselector
    description: This component builds the responder policies of this virtual service
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: $selected-responder-name == $shared-responder-config.name and exists($shared-responder-config.rate-limiter)
    properties:
      name: $substitutions.responder-ss-name($selected-responder-name)
      rule: $shared-responder-config.rate-limiter.rl-field
    components:
      - 
          name: limit-identifier-comp
          type: ns::nslimitidentifier
          properties:
            limitidentifier: $substitutions.limitidentifier($selected-responder-name)
            threshold: $shared-responder-config.rate-limiter.rl-count
            timeslice: $shared-responder-config.rate-limiter.rl-time * 1000
            selectorname: $parent.properties.name
  -
    name: responder-action-comp
    type: ns::responderaction
#         condition: $parameters.action != "block" and $parameters.action != "log" and $parameters.target
    description: This component builds the responder policies of this virtual service
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: $selected-responder-name == $shared-responder-config.name and $substitutions.is-actionable($shared-responder-config.action)
    properties:
      name: $substitutions.responder-act-name($selected-responder-name, $shared-responder-config.action)
      type: $substitutions.responder-action-type($shared-responder-config.action)
      target: str("\"") + $shared-responder-config.target + str("\"")
  -
    name: responder-log-comp
    type: ns::auditmessageaction
#         condition: $parameters.action != "block" and $parameters.action != "log" and $parameters.target
    description: This component builds the responder policies of this virtual service
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: $selected-responder-name == $shared-responder-config.name and $shared-responder-config.action != "no_action"
    properties:
      name: $substitutions.responder-log-name($selected-responder-name)
      loglevel: "INFORMATIONAL"
      stringbuilderexpr: str("\"{\\\"srcip\\\":\\\"\" + CLIENT.IP.SRC + \"\\\",\\\"dstip\\\":\\\"\" + CLIENT.IP.DST + \"\\\", \\\"dstport\\\":\" + CLIENT.TCP.DSTPORT + \", \\\"host\\\":\\\"\" + HTTP.REQ.HOSTNAME + \"\\\", \\\"method\\\":\\\"\" + HTTP.REQ.METHOD + \"\\\", \\\"uri\\\":\\\"\" + HTTP.REQ.URL + \"\\\", \\\"customer\\\":\\\"%{$parameters.customer-name}%\\\", \\\"responder_name\\\":\\\"%{$selected-responder-name}%\\\", \\\"responder_object\\\":\\\"%{$substitutions.responder-pol-name($selected-responder-name, $shared-responder-config.action, if-then-else($shared-responder-config.rate-limiter, true, false))}%\\\", \\\"responder_action\\\":\\\"%{$shared-responder-config.action}%\\\"}\"")
      bypasssafetycheck: "YES" 
      # type: $substitutions.responder-action-type($shared-responder-config.action)
      # target: str("\"") + $shared-responder-config.target + str("\"")
      #             name: $parameters.customer-name + "-" + $parameters.name + "-logaction"
#             loglevel: "INFORMATIONAL"
#             #stringbuilderexpr: str("\"{\\\"customer-name\\\":\\\"%{$parameters.customer-name}%-%{$parameters.app-name}%\\\",\\\"srcip\\\":\\\"\" + CLIENT.IP.SRC + \"\\\",\\\"dstip\\\":\\\"\" + CLIENT.IP.DST + \"\\\"}\"")
#             stringbuilderexpr: str("\"{\\\"srcip\\\":\\\"\" + CLIENT.IP.SRC + \"\\\",\\\"dstip\\\":\\\"\" + CLIENT.IP.DST + \"\\\", \\\"dstport\\\":\" + CLIENT.TCP.DSTPORT + \", \\\"host\\\":\\\"\" + HTTP.REQ.HOSTNAME + \"\\\", \\\"method\\\":\\\"\" + HTTP.REQ.METHOD + \"\\\", \\\"uri\\\":\\\"\" + HTTP.REQ.URL + \"\\\", \\\"customer\\\":\\\"%{$parameters.customer-name}%\\\", \\\"responder-name\\\":\\\"%{$parameters.name}%\\\", \\\"responder-id\\\":\\\"%{$parameters.customer-name}%-%{$parameters.name}%-rpol\\\", \\\"responder-action\\\",\\\"%{$parameters.action}%\\\"}\"")
#             bypasssafetycheck: "YES"   

  -
    name: responder-ratelimit-policies-comp
    type: ns::responderpolicy
    description: This component builds the responder policies of this virtual service
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: $shared-responder-config.rate-limiter and $selected-responder-name == $shared-responder-config.name
    properties:
      name: $substitutions.responder-pol-name($selected-responder-name, $shared-responder-config.action, $shared-responder-config.rate-limiter)
      rule: $substitutions.generate-rule(if-then-else($shared-responder-config.rate-limiter, $substitutions.limitidentifier($selected-responder-name), ""), $shared-responder-config.expression)
      action: if-then-else($substitutions.is-actionable($shared-responder-config.action), $substitutions.responder-act-name($selected-responder-name, $shared-responder-config.action), $substitutions.transform-action-name($shared-responder-config.action))
      logaction?: if-then-else($shared-responder-config.action != "no_action", $substitutions.responder-log-name($selected-responder-name), $parameters.anull)
  -
    name: responder-policies-comp
    type: ns::responderpolicy
    description: This component builds the responder policies of this virtual service
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: (not $shared-responder-config.rate-limiter) and $selected-responder-name == $shared-responder-config.name
    properties:
      name: $substitutions.responder-pol-name($selected-responder-name, $shared-responder-config.action, $shared-responder-config.rate-limiter)
      rule: $substitutions.generate-rule(if-then-else($shared-responder-config.rate-limiter, $substitutions.responder-li-name($selected-responder-name), ""), $shared-responder-config.expression)
      action: if-then-else($substitutions.is-actionable($shared-responder-config.action), $substitutions.responder-act-name($selected-responder-name, $shared-responder-config.action), $substitutions.transform-action-name($shared-responder-config.action))
      logaction?: if-then-else($shared-responder-config.action != "no_action", $substitutions.responder-log-name($selected-responder-name), $parameters.anull)
  # -
  #   name: ratelimit-policies-comp
  #   type: ns::responderpolicy
  #   description: This component builds the ratelimiting (responder) policies of this virtual service
  #   condition: $parameters.responder-configs and $parameters.shared-app-configs.ratelimit-configs
  #   repeat: 
  #     repeat-list: $parameters.responder-configs
  #     repeat-item: selected-responder-config
  #     repeat:
  #       repeat-list: $parameters.shared-app-configs.ratelimit-configs
  #       repeat-item: shared-ratelimit-config
  #       repeat-condition: $selected-responder-config.responder-name == $shared-ratelimit-config.name
  #   properties:
  #     name: $substitutions.ratelimit-pol-name($selected-responder-config.responder-name)
  #     rule: $substitutions.add-ratelimit-expr($shared-ratelimit-config.responder-rule-expr, $shared-ratelimit-config.limit-identifier)
  #     action: $substitutions.transform-action-name($shared-ratelimit-config.responder-action)
  #     logaction?: $shared-ratelimit-config.responder-logaction
  -
    name: responder-policy-names-comp
    type: object
    condition: $parameters.responder-names and $parameters.shared-app-configs.responder-configs
    repeat: 
      repeat-list: $parameters.responder-names
      repeat-item: selected-responder-name
      repeat:
        repeat-list: $parameters.shared-app-configs.responder-configs
        repeat-item: shared-responder-config
        repeat-condition: $selected-responder-name == $shared-responder-config.name
    properties:
      name: if-then-else(exists($shared-responder-config.rate-limiter), $substitutions.responder-pol-name($selected-responder-name, $shared-responder-config.action, $shared-responder-config.rate-limiter), $substitutions.responder-pol-name($selected-responder-name, $shared-responder-config.action, $shared-responder-config.rate-limiter))
      continue: false
  # -
  #   name: ratelimit-policy-names-comp
  #   type: object
  #   condition: $parameters.responder-configs and $parameters.shared-app-configs.ratelimit-configs
  #   repeat: 
  #     repeat-list: $parameters.responder-configs
  #     repeat-item: selected-responder-config
  #     repeat:
  #       repeat-list: $parameters.shared-app-configs.ratelimit-configs
  #       repeat-item: shared-ratelimit-config
  #       repeat-condition: $selected-responder-config.responder-name == $shared-ratelimit-config.name
  #   properties:
  #     name: $substitutions.ratelimit-pol-name($selected-responder-config.responder-name)
  #     continue: $selected-responder-config.continue
  -
    name: responder-policies-bindings-comp
    type: neustar::responder-policies
    condition: ($parameters.lb-service-type == "SSL" or $parameters.lb-service-type == "HTTP") and $components.responder-policy-names-comp.properties
    properties:
        customer-name: $parameters.customer-name
        vserver-name: $parameters.vserver-name
        policyname-list: $components.responder-policy-names-comp.properties

