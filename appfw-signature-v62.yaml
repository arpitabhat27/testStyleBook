---
name: appfw-signature
namespace: neustar.citrix.adc.stylebooks 
version: "6.2"
display-name: StyleBook for Uploading AppFw Signature files and Creating a Signature object
description: This StyleBook for creating AppFW signature
schema-version: "1.0"
import-stylebooks:
  - 
    namespace: neustar.citrix.adc.commontypes
    prefix: neustar
    version: "6.2"
  - 
    namespace: netscaler.nitro.config
    prefix: ns
    version: "13.0"
parameters:
  - 
    name: customer-name
    label: Customer
    description: Customer Name or ID that is used to differentiate a customer's config objects
    type: string
    required: true
    key: true
    pattern: "^[A-Z0-9]{2}_[A-Z0-9]{2,10}$"
  -
    name: signatures
    type: neustar::appfw-signature-params[]
    description: List of signatures
    required: true

substitutions: 
  is-not-none(obj): exists($obj)
  onoff-replace: 
    false: "OFF"
    true: "ON"
  str-esc(val): str("\"") + $val + str("\"")
  policy-rule(func, name): $func + "(" + $substitutions.str-esc($name) + ")"
  sig-name(name): $parameters.customer-name + "-" + $name + "-" + "sigs"
components:
  -
    name: appfw-signaturesource-comp
    type: ns::appfwsignatures
    repeat: $parameters.signatures
    repeat-item: sig
    repeat-condition: $sig.signaturesource
    meta-properties:
      action: import
    properties:
      name: $substitutions.sig-name($sig.name)
      src: $sig.signaturesource.signaturesourceurl
  -
    name: appfw-signatureupload-comp
    type: ns::systemfile
    repeat: $parameters.signatures
    repeat-item: sig
    repeat-condition: not $sig.signaturesource and $sig.signaturefile.signaturefileupload
    properties:
      filename: $substitutions.sig-name($sig.name) + ".xml"
      filelocation: "/var/tmp"
      filecontent: base64.encode($sig.signaturefile.signaturefileupload.contents)
      fileencoding: "BASE64"
  -
    name: appfw-signature-comp
    type: ns::appfwsignatures
    repeat: $parameters.signatures
    repeat-item: sig
    repeat-condition: not $sig.signaturesource and $sig.signaturefile
    meta-properties:
      action: import
    properties:
      name: $substitutions.sig-name($sig.name)
      src: str("local:") + $substitutions.sig-name($sig.name) + ".xml"
